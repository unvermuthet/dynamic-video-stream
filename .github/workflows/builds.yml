name: Build GDExtension
on:
  push:
    branches: "*"
    tags:
      - "v*.*.*"
  pull_request:
  merge_group:
  workflow_dispatch:
  workflow_call:

env:
  LIBNAME: dynamic-video-stream

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup clang-format
        shell: bash
        run: |
          python -m pip install clang-format

      - name: Run clang-format
        shell: bash
        run: |
          clang-format src/** --dry-run --Werror

  build:
    needs: lint
    permissions:
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            { platform: linux, arch: x86_64, os: ubuntu-22.04 },
            { platform: linux, arch: arm64, os: ubuntu-22.04-arm },
            { platform: windows, arch: x86_64, os: ubuntu-latest },
            { platform: macos, arch: universal, os: macos-latest },
          ]
        target-type: [template_debug, template_release]
        float-precision: [single]

    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build GDExtension
        uses: ./.github/actions/build
        with:
          scons-arguments: "lto=auto use_mingw=yes use_static_cpp=yes optimize=speed"
          platform: ${{ matrix.target.platform }}
          arch: ${{ matrix.target.arch }}
          float-precision: ${{ matrix.float-precision }}
          target-type: ${{ matrix.target-type }}

      - name: Windows - Delete compilation files
        if: ${{ matrix.target.platform == 'windows' }}
        shell: pwsh
        run: |
          Remove-Item project/addons/${{ env.LIBNAME }}/bin/windows/* -Include *.exp,*.lib,*.pdb -Force

      - name: Copy license files
        run: |
          cp LICENSE project/addons/${{ env.LIBNAME }}/LICENSE
          cp README.md project/addons/${{ env.LIBNAME }}/README.md
          cp NOTICE.md project/addons/${{ env.LIBNAME }}/NOTICE.md

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-${{ matrix.target.platform }}-${{ matrix.target.arch }}-${{ matrix.float-precision }}-${{ matrix.target-type }}
          path: project/*/${{ env.LIBNAME }}

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ env.LIBNAME }}-${{ github.sha }}
          pattern: ${{ env.LIBNAME }}-*
          delete-merged: true

  ## Can't test NDI features because of Github Action Runners network configuration (firewall?)
  ## Works on self-hosted runners

  # test:
  #   runs-on: ubuntu-latest
  #   needs: merge
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Download Build Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ env.LIBNAME }}-${{ github.sha }}
  #         path: project # Results in project/addons/dynamic-video-stream/...

  #     - name: Install NDI Runtime
  #       run: |
  #         wget https://raw.githubusercontent.com/DistroAV/DistroAV/refs/heads/master/CI/libndi-get.sh
  #         chmod +x libndi-get.sh
  #         ./libndi-get.sh install

  #     - name: Run Tests
  #       uses: ./.github/actions/test
  #       with:
  #         godot-url: https://github.com/godotengine/godot-builds/releases/download/4.4-rc2/Godot_v4.4-rc3_linux.x86_64.zip
  #         godot-bin: ./Godot_v4.4-rc3_linux.x86_64
  #         project-dir: project

  release:
    runs-on: ubuntu-latest
    needs: merge
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-${{ github.sha }}
          path: ${{ env.LIBNAME }}-${{ github.sha }}

      - name: Zip Artifact Back Up
        run: |
          sudo apt-get install -y zip
          zip -r ${{ env.LIBNAME }}.zip ${{ env.LIBNAME }}-${{ github.sha }}

      - name: Create Release Draft
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda
        with:
          files: ${{ env.LIBNAME }}.zip
          draft: true
          generate_release_notes: true
